name: Pull Request Checks

on:
  pull_request:
    branches: [ main, dev ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.13'

jobs:
  # Code Quality Checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run ESLint
      working-directory: ./frontend
      run: npm run lint || echo "ESLint not configured yet"

    - name: Run Prettier check
      working-directory: ./frontend
      run: npm run format:check || echo "Prettier not configured yet"

    - name: TypeScript type check
      working-directory: ./frontend
      run: npx tsc --noEmit

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install backend dependencies
      working-directory: ./backend
      run: poetry install

    - name: Run Python linting
      working-directory: ./backend
      run: |
        poetry run flake8 . || echo "Flake8 not configured yet"
        poetry run black --check . || echo "Black not configured yet"

    - name: Run Python type checking
      working-directory: ./backend
      run: poetry run mypy . || echo "MyPy not configured yet"

  # Test Coverage
  test-coverage:
    name: Test Coverage
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run frontend tests with coverage
      working-directory: ./frontend
      run: npm test -- --coverage --watchAll=false

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install backend dependencies
      working-directory: ./backend
      run: poetry install

    - name: Run backend tests with coverage
      working-directory: ./backend
      run: poetry run pytest --cov=. --cov-report=xml || echo "No tests found, skipping coverage"
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

    - name: Generate backend coverage report
      working-directory: ./backend
      run: poetry run coverage report -m

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        files: ./frontend/coverage/lcov.info,./backend/htmlcov/coverage.xml
        flags: pr-checks
        name: pr-coverage

  # Dependency Security Check
  dependency-check:
    name: Dependency Security
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run npm audit
      working-directory: ./frontend
      run: npm audit --audit-level=moderate

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install backend dependencies
      working-directory: ./backend
      run: poetry install

    - name: Run safety check
      working-directory: ./backend
      run: |
        poetry run pip install safety
        poetry run safety check || true

  # PR Comment with Results
  pr-comment:
    name: PR Comment
    runs-on: ubuntu-latest
    needs: [code-quality, test-coverage, dependency-check]
    if: always()
    permissions:
      issues: write
      pull-requests: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Comment PR
      uses: actions/github-script@v7
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });

          const botComment = comments.find(comment =>
            comment.user.type === 'Bot' && comment.body.includes('## CI/CD Results')
          );

          const results = {
            'Code Quality': '${{ needs.code-quality.result }}',
            'Test Coverage': '${{ needs.test-coverage.result }}',
            'Dependency Check': '${{ needs.dependency-check.result }}'
          };

          const statusEmoji = (status) => {
            switch(status) {
              case 'success': return '‚úÖ';
              case 'failure': return '‚ùå';
              case 'cancelled': return '‚èπÔ∏è';
              default: return '‚è≥';
            }
          };

          const commentBody = `## CI/CD Results

          | Check | Status |
          |-------|--------|
          | Code Quality | ${statusEmoji(results['Code Quality'])} ${results['Code Quality']} |
          | Test Coverage | ${statusEmoji(results['Test Coverage'])} ${results['Test Coverage']} |
          | Dependency Check | ${statusEmoji(results['Dependency Check'])} ${results['Dependency Check']} |

          ${Object.values(results).every(status => status === 'success') ?
            'üéâ All checks passed! This PR is ready for review.' :
            '‚ö†Ô∏è Some checks failed. Please review the results above.'
          }`;

          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: commentBody
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });
          }
