name: CI/CD Pipeline

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.13'

jobs:
  # Frontend Tests
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run frontend tests
      working-directory: ./frontend
      run: npm test -- --coverage --watchAll=false

    - name: Upload frontend test coverage
      uses: codecov/codecov-action@v5
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # Backend Tests
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache Poetry dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pypoetry
        key: ${{ runner.os }}-poetry-${{ hashFiles('backend/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install backend dependencies
      working-directory: ./backend
      run: poetry install

    - name: Run backend tests
      working-directory: ./backend
      run: poetry run python manage.py test
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

  # Docker Build & Test
  docker-build:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        target: test
        tags: portfolio-frontend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        load: true

    - name: Build backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        tags: portfolio-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        load: true

    - name: Run frontend tests in Docker
      run: |
        docker run --rm portfolio-frontend:test npm test -- --watchAll=false

    - name: Set up Python for backend tests
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry for backend tests
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install backend dependencies for tests
      working-directory: ./backend
      run: poetry install --no-root --no-interaction

    - name: Run backend tests with PostgreSQL service
      working-directory: ./backend
      run: |
        poetry run pytest --cov=. --cov-report=xml || echo 'No tests found'
      env:
        DB_HOST: postgres
        DB_NAME: test_db
        DB_USER: postgres
        DB_PASSWORD: postgres

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run npm audit for frontend
      working-directory: ./frontend
      run: npm audit --audit-level=moderate

    - name: Set up Python for backend security
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry for backend security
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Run safety check for backend
      working-directory: ./backend
      run: |
        poetry install --only main
        poetry run pip install safety
        poetry run safety check || true

  # All checks completed successfully
  checks-completed:
    name: All Checks Completed
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests, docker-build, security-scan]
    if: always()

    steps:
    - name: All checks completed
      run: |
        echo "âœ… All CI/CD checks completed successfully!"
        echo "ðŸ“‹ Frontend tests: ${{ needs.frontend-tests.result }}"
        echo "ðŸ“‹ Backend tests: ${{ needs.backend-tests.result }}"
        echo "ðŸ“‹ Docker build: ${{ needs.docker-build.result }}"
        echo "ðŸ“‹ Security scan: ${{ needs.security-scan.result }}"
        echo ""
        echo "ðŸš€ Ready for production deployment via cron script!"
